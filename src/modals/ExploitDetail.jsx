/* eslint-disable react/prop-types */
import { useState } from "react";
import { X, ChevronDown, ChevronUp, Link2 } from "lucide-react";

export default function EnhancedDetailsModal({ isOpen, onClose, data }) {
  const [showExploit, setShowExploit] = useState(false);


  if (!isOpen || !data) return null;

  const formatDate = (dateStr) => {
    if (!dateStr) return "N/A";
    const date = new Date(dateStr);
    return isNaN(date?.getTime()) ? "Invalid Date" : date.toLocaleDateString();
  };

  return (
    <div
      role="dialog"
      aria-modal="true"
      aria-labelledby="modal-title"
      className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50"
    >
      <div className="bg-[#1a1f2e] rounded-xl w-full max-w-4xl shadow-xl overflow-hidden">
        {/* Header */}
        <div className="flex justify-between items-center px-6 py-4 border-b border-gray-700">
          <h2 id="modal-title" className="text-xl font-semibold text-white">
            Vulnerability Details
          </h2>
          <button onClick={onClose} className="text-gray-400 hover:text-white">
            <X size={20} />
          </button>
        </div>

        {/* Body */}
        <div className="px-6 py-4 max-h-[75vh] overflow-y-auto custom-scrollbar text-gray-300 space-y-4">
          {/* Title */}
          <div>
            <h3 className="text-sm text-gray-400">Title</h3>
            <p className="text-white font-medium">{data?.Title || "N/A"}</p>
          </div>

          {/* Core Info */}
          <div className="grid grid-cols-2 gap-4">
            {[
              ["Scan Type", data?.scan_type],
              ["Asset Type", data?.asset_type],
              ["Threat Type", data?.threat_type],
              [
                "Severity",
                // eslint-disable-next-line react/jsx-key
                <span className="font-semibold text-red-400">{data?.Severity}</span>,
              ],
              ["CVE", data?.CVE],
              ["CVE ID", data?.CVE_ID],
              ["EPSS", data?.EPSS],
              ["Status", data?.status],
            ].map(([label, value], idx) => (
              <div key={idx}>
                <h3 className="text-sm text-gray-400">{label}</h3>
                <p>{typeof value === "object" ? "N/A" : value || "N/A"}</p>
              </div>
            ))}
          </div>

          {/* Description */}
          <div>
            <h3 className="text-sm text-gray-400">Description</h3>
            <p>{data?.Description || "N/A"}</p>
          </div>

          {/* Location */}
          {data?.Location && typeof data?.Location === "string" && (
            <div>
              <h3 className="text-sm text-gray-400">Location / Impact URL</h3>
              <a
                href={data?.Location}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-400 flex items-center gap-1"
              >
                <Link2 size={16} /> {data?.Location}
              </a>
            </div>
          )}

          {/* Reference URL */}
          {data?.Reference_URL && typeof data?.Reference_URL === "string" && (
            <div>
              <h3 className="text-sm text-gray-400">Reference URL</h3>
              <a
                href={data.Reference_URL}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-400 flex items-center gap-1"
              >
                <Link2 size={16} /> {data.Reference_URL}
              </a>
            </div>
          )}

          {/* Infrastructure Asset */}
          {data?.InfraStructureAsset && (
            <div className="bg-[#22293d] p-4 rounded-lg">
              <h3 className="text-white font-medium mb-2">Infrastructure Asset</h3>
              <p>{data?.InfraStructureAsset?.asset_hostname || "N/A"}</p>
            </div>
          )}

          {/* Business Application */}
          {data?.BusinessApplication && (
            <div className="bg-[#22293d] p-4 rounded-lg">
              <h3 className="text-white font-medium mb-2">Business Application</h3>
              <p>{data?.BusinessApplication?.name || "N/A"}</p>
              <p className="text-sm text-gray-400">
                {data?.BusinessApplication?.description || ""}
              </p>
            </div>
          )}

          {/* Exploit Details */}
          {Array.isArray(data?.Exploit_Details) && data?.Exploit_Details.length > 0 && (
            <div className="bg-[#22293d] p-4 rounded-lg">
              <button
                className="w-full flex justify-between items-center text-white font-medium"
                onClick={() => setShowExploit(!showExploit)}
              >
                Exploit Details
                {showExploit ? <ChevronUp /> : <ChevronDown />}
              </button>
              {showExploit && (
                <ul className="mt-3 space-y-2">
                  {data?.Exploit_Details.map((link) =>
                    typeof link === "string" ? (
                      <li key={link}>
                        <a
                          href={link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-400 flex items-center gap-1 text-sm"
                        >
                          <Link2 size={14} /> {link}
                        </a>
                      </li>
                    ) : null
                  )}
                </ul>
              )}
            </div>
          )}

          {/* Exception Details */}
          {data?.Exception && (
            <div className="bg-[#22293d] p-4 rounded-lg">
              <h3 className="text-white font-medium mb-2">Exception Details</h3>
              <p>
                <span className="text-gray-400">Reason:</span>{" "}
                {data?.Exception?.reason || "N/A"}
              </p>
              <p>
                <span className="text-gray-400">Start:</span>{" "}
                {formatDate(data?.Exception?.exception_start_date)}
              </p>
              <p>
                <span className="text-gray-400">End:</span>{" "}
                {formatDate(data?.Exception?.exception_end_date)}
              </p>
              {data?.Exception?.proof && (
                <a
                  href={data?.Exception?.proof}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-400 underline text-sm"
                >
                  View Proof
                </a>
              )}
            </div>
          )}

          {/* Creator / Tenant */}
          {data?.creator?.company_name && (
            <div>
              <h3 className="text-sm text-gray-400">Tenant</h3>
              <p>{data?.creator?.company_name}</p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-end px-6 py-3 border-t border-gray-700">
          <button
            onClick={onClose}
            className="bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded-lg text-white"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}
