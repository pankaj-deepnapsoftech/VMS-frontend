import { useDataContext } from "@/context";
import useAccessPartner from "@/hooks/AccessPartner";
import { PopupMenu } from "@/modals/PopupManue";
import { isHaveAction, isModifyAccess } from "@/utils/pageAccess";
import { calculateACS } from "@/utils/vulnerableOperations";
import { useEffect, useState } from "react";
import { BiDetail } from "react-icons/bi";
import { BsThreeDotsVertical } from "react-icons/bs";
import { GrStatusGood } from "react-icons/gr";
import ExploitDetail from "@/modals/ExploitDetail";
import { StatusModal } from "@/modals/StatusModal";
import Pagination from "./Pagination";
// Dummy vulnerability data
const vulnerabilities = [
  { id: 1, name: "SQL Injection", severity: "Critical", status: "Open" },
  { id: 2, name: "XSS Attack", severity: "Medium", status: "Open" },
  { id: 3, name: "Unpatched Software", severity: "Low", status: "Close" },
  { id: 4, name: "Insecure Config", severity: "Critical", status: "Open" },
  { id: 5, name: "Weak Password Policy", severity: "Medium", status: "Close" },
];

const tabs = ["Open", "Close", "Low", "Medium", "Critical"];

export default function PendingVulnerability() {
  const [activeTab, setActiveTab] = useState("Open");
  const { GetAssignedByData, AssignedData } = useDataContext()
  const [activeMenu, setActiveMenu] = useState(null);
  const [menuPosition, setMenuPosition] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const { closeModal, isOpen, openModal } = useAccessPartner();
  const [exploitDetails, setExploitDetails] = useState(null);
  const [status, setStatus] = useState(null);
  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false);
  const showTitle = (header) => {
    if (header === "ACS") {
      return "Asset/Application Criticality Score";
    }
  };

  const toggleMenu = (index, e) => {
    if (activeMenu === index) {
      setActiveMenu(null);
      setMenuPosition(null);
    } else {
      const rect = e.currentTarget.getBoundingClientRect();
      setMenuPosition({
        top: rect.bottom + window.scrollY,
        left: rect.left + window.scrollX - 120,
      });
      setActiveMenu(index);
    }
  };

  const closeMenu = () => {
    setActiveMenu(null);
    setMenuPosition(null);
  };

  useEffect(() => {
    GetAssignedByData()
  }, [])


  return (
    <div className="p-6 bg-slate-900 min-h-screen text-white">
      <h1 className="text-2xl font-semibold mb-6">
        Pending Vulnerabilities
      </h1>

      {/* Tabs
      <div className="flex gap-3 mb-6">
        {tabs.map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition
              ${activeTab === tab
                ? "bg-blue-600 text-white"
                : "bg-slate-800 text-slate-300 hover:bg-slate-700"
              }`}
          >
            {tab}
          </button>
        ))}
      </div> */}

      {/* Table */}
      <div className="overflow-x-auto custom-scrollbar w-full relative">
        <table className="min-w-full text-sm text-left text-gray-300 divide-y divide-gray-700">
          <thead className="bg-[#0c1120] text-white uppercase whitespace-nowrap tracking-wider">
            <tr>
              {[
                "S No.",
                "Title",
                "Scan Type",
                "Threat Type",
                "Severity",
                "Status",
                isHaveAction() && "Actions",
              ].map((header) => (
                <th
                  title={showTitle(header)}
                  key={header}
                  className="px-4 py-3 border-b border-gray-600 font-medium"
                >
                  {header}
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-700 relative">
            {AssignedData?.map((item, index) => (
              <tr
                key={index}
                className="border-b whitespace-nowrap border-slate-700 hover:bg-[#1E293B] transition relative"
              >
                <td className="px-4 py-3">
                  {(currentPage - 1) * 10 + 1 + index}
                </td>
                <td className="px-4 py-3">{item.Title || "-"}</td>
                <td className="px-4 py-3">{item.scan_type || "-"}</td>
                <td className="px-4 py-3">
                  {item.threat_type || "-"}
                </td>
                <td className="px-4 py-3">
                  {item?.Severity?.name || "-"}
                </td>
                <td className="px-4 py-3">{item?.status || "-"}</td>
                {isHaveAction() && (
                  <td className="px-4 py-3 ">
                    <button
                      className="hover:bg-gray-700 px-3 py-2 rounded-lg"
                      onClick={(e) => toggleMenu(index, e)}
                    >
                      <BsThreeDotsVertical />
                    </button>
                  </td>
                )}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <PopupMenu position={menuPosition} onClose={closeMenu}>
        {activeMenu !== null && (
          <>

            <li
              className="px-4 py-2 hover:bg-gray-600 cursor-pointer flex gap-2 items-center"
              onClick={() => {
                setExploitDetails(AssignedData[activeMenu]);
                openModal();
                closeMenu();
              }}
            >
              <BiDetail />
              View Details
            </li>

            {isModifyAccess() && (
              <li
                className="px-4 py-2 hover:bg-gray-600 cursor-pointer flex gap-2 items-center"
                onClick={() => {
                  setStatus({
                    status: AssignedData[activeMenu].status,
                    _id: AssignedData[activeMenu]._id,
                  });
                  setIsStatusModalOpen(true);
                }}
              >
                <GrStatusGood /> Change Status
              </li>
            )}
          </>
        )}
      </PopupMenu>


      <ExploitDetail data={exploitDetails}
        onClose={closeModal}
        isOpen={isOpen} />

      {isStatusModalOpen && (
        <StatusModal
          setIsModalOpen={setIsStatusModalOpen}
          defaultData={status}
        />
      )}

      <Pagination
        page={currentPage}
        setPage={setCurrentPage}
        hasNextPage={AssignedData.length === 10}
        total={AssignedData.length}
      />
    </div>
  );
}
