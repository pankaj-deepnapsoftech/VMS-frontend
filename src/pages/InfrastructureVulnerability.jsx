import React, { useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  LineChart,
  Line,
  Legend,
} from "recharts";
import { useInfrastructureVulnerabilityContext } from "@/context";
import Loader from "@/components/Loader/Loader";
import { Modal } from "@/components/modal/FileUploadModal";
import { BiPlus } from "react-icons/bi";

const InfrastructureVulnerability = () => {
  const {
    loading,
    infrafirstChartData,
    infraSecondChartData,
    infraThirdChartData,
    reportUpload,
  } = useInfrastructureVulnerabilityContext();

  const barChartData = Object.entries(infrafirstChartData)?.map(
    ([name, value]) => ({
      name,
      value,
    })
  );

  const severityLevels = ["Low", "Medium", "High", "Critical", "Informational"];

  // Convert rawData into chart-friendly format
  const lineChartData = Object.keys(infraThirdChartData)?.map((day) => ({
    day: `Day ${day}`,
    Critical: infraThirdChartData[day]["Critical"] || 0,
    High: infraThirdChartData[day]["High"] || 0,
    Medium: infraThirdChartData[day]["Medium"] || 0,
    Low: infraThirdChartData[day]["Low"] || 0,
    Informational: infraThirdChartData[day]["Informational"] || 0,
  }));

  const [isModalOpen, setIsModalOpen] = useState(false);

  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <div className="p-6 bg-background min-h-screen">
          {/* Header */}

          <div className="flex justify-end items-center py-4">
            <button
              onClick={() => setIsModalOpen(true)}
              className="px-4 py-2 bg-gradient-to-tr from-[#1f1d1d] to-[#666666]  text-white font-medium rounded-md hover:bg-blue-700 transition-colors flex flex-row"
            >
              <BiPlus className="h-6 w-6" />
              Report Upload
            </button>
          </div>

          <Modal
            isOpen={isModalOpen}
            onClose={() => setIsModalOpen(false)}
            title="Report Upload"
            method={reportUpload}
            subtitle=" please upload an Excel file in XLSX or XLS format. Ensure the file is properly formatted and contains all necessary data for processing."
          />

          {/* Section 1: Bar Chart */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div className="bg-[#2d333b] p-6 rounded-lg shadow">
              <h2 className="text-lg font-semibold text-white mb-4">
                Vulnerable Configuration Items (CIs) by CI Class
              </h2>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={barChartData} barSize={35}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="value" fill="#4299e1" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Section 2: Heatmap */}
            <div className="bg-[#2d333b] text-white p-6 rounded-lg shadow">
              <h2 className="text-lg font-semibold text-white mb-4">
                Vulnerable Items (VIs) by Risk Rating and CI Class
              </h2>
              <div className="overflow-x-auto shadow-lg rounded-lg">
                <table className="min-w-full bg-[#566579] border border-gray-300 text-center text-sm">
                  <thead>
                    <tr className="bg-gradient-to-bl from-[#333333] to-[#666666] text-white">
                      <th className="px-2 py-1 border-r">Server</th>
                      {severityLevels.map((severity) => (
                        <th key={severity} className="px-3 py-2 border-r">
                          {severity}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(infraSecondChartData).map(
                      ([server, vulnerabilities], index) => (
                        <tr
                          key={server}
                          className={
                            index % 2 === 0 ? "bg-[#333b46]" : "bg-[#384553]"
                          }
                        >
                          <td className="px-3 py-1 font-semibold border-r">
                            {server}
                          </td>
                          {severityLevels.map((severity) => (
                            <td key={severity} className="px-3 py-2 border-r">
                              {vulnerabilities[severity] !== undefined
                                ? vulnerabilities[severity]
                                : "-"}
                            </td>
                          ))}
                        </tr>
                      )
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Section 3: Line Chart */}
          <div className="bg-[#2d333b] p-6 rounded-lg shadow-md mb-6">
            <h2 className="text-lg font-semibold text-white mb-4">
              Average Vulnerable Items per CI
            </h2>
            <ResponsiveContainer width="100%" height={320}>
              <LineChart
                data={lineChartData}
                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
              >
                <CartesianGrid strokeDasharray="4 4" strokeOpacity={0.5} />
                <XAxis dataKey="day" tick={{ fill: "#4A5568" }} />
                <YAxis tick={{ fill: "#4A5568" }} domain={[0, "auto"]} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "white",
                    borderRadius: "8px",
                  }}
                />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="Critical"
                  stroke="#f56565"
                  strokeWidth={2}
                  dot={false}
                />
                <Line
                  type="monotone"
                  dataKey="High"
                  stroke="#ed8936"
                  strokeWidth={2}
                  dot={false}
                />
                <Line
                  type="monotone"
                  dataKey="Medium"
                  stroke="#4299e1"
                  strokeWidth={2}
                  dot={false}
                />
                <Line
                  type="monotone"
                  dataKey="Low"
                  stroke="#48bb78"
                  strokeWidth={2}
                  dot={false}
                />
                <Line
                  type="monotone"
                  dataKey="Informational"
                  stroke="#a0aec0"
                  strokeWidth={2}
                  dot={false}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>

          {/* Section 4: Summary Cards */}
          {/* <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow text-center">
            <h3 className="text-sm text-gray-500">Unmatched CIs</h3>
            <h2 className="text-3xl font-bold text-gray-800">733</h2>
            <p className="text-xs text-red-500">â–² +2</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow text-center">
            <h3 className="text-sm text-gray-500">Vulnerable CIs Without Owners</h3>
            <h2 className="text-3xl font-bold text-gray-800">566</h2>
          </div>
          <div className="bg-white p-6 rounded-lg shadow text-center">
            <h3 className="text-sm text-gray-500">Retired or Stolen CIs</h3>
            <h2 className="text-3xl font-bold text-gray-800">0</h2>
          </div>
          <div className="bg-white p-6 rounded-lg shadow text-center">
            <h3 className="text-sm text-gray-500">Other Metric</h3>
            <h2 className="text-3xl font-bold text-gray-800">123</h2>
          </div>
        </div> */}
        </div>
      )}
    </>
  );
};

export default InfrastructureVulnerability;
