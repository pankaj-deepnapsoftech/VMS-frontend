import {
  useAuthContext,
  useInfraAssetContext,
  useVulnerabililtyDataContext,
} from "@/context";
import { ImageUploader } from "@/utils/ImagesUploader";
import { EmptyFieldRemover } from "@/utils/RemoveEmptyField";
import { useFormik } from "formik";
import React, { useEffect, useState } from "react";
import { IoClose } from "react-icons/io5";
import { useLocation } from "react-router-dom";

const VulnerabilityForm = () => {
  const {
    totalInfraAsset,
    totalBusinessApplication,
    GetAllInfraAssetData,
    GetAllBusinessApplication,
  } = useInfraAssetContext();
  const { AddData, UpdateData } = useVulnerabililtyDataContext();
  const [POC, setPOC] = useState([{ value: "", file: null, image: "" }]);
  const { token } = useAuthContext();

  const [tenant, setTenant] = useState("");
  const location = useLocation();

  const [editableData, setEditableData] = useState();

  const { values, handleChange, handleBlur, handleSubmit, handleReset } =
    useFormik({
      initialValues: editableData || {
        scan_type: "",
        asset_type: "",
        threat_type: "",
        CVE: "",
        CVE_ID: "",
        Exploit_Availale: "",
        Exploit_Details: "",
        EPSS: "",
        exploit_complexity: "",
        Location: "",
        Title: "",
        Description: "",
        Severity: "",
        CVSS: "",
        Reference_URL: "",
        BusinessApplication: "",
        InfraStructureAsset: "",
      },
      enableReinitialize: true,
      onSubmit: async (values) => {
        if (!tenant) {
          alert("Please select tenant first");
          return;
        }
        const Proof_of_Concept = await Promise.all(
          POC.map(async (item) => {
            let image;
            if (item.file) {
              image = await ImageUploader(item.file);
            }

            return { test: item.value, image };
          })
        );

        const data = EmptyFieldRemover(values);

        if (editableData) {
          UpdateData({ ...data, Proof_of_Concept }, editableData._id);
        } else {
          AddData({ ...data, Proof_of_Concept }, tenant);
        }

        handleReset();
        setPOC([{ value: "", file: null, image: "" }]);
      },
    });

  useEffect(() => {
    if (location?.state?.data) {
      setEditableData(location?.state?.data);
      const data = location?.state?.data?.Proof_of_Concept.map((item) => ({
        ...item,
        value: item.test,
      }));
      setPOC(data);
    }

    const params = new URLSearchParams(location.search);
    setTenant(params.get("tenant") || "");
  }, [location.search]);

  useEffect(() => {
    if (token) {
      GetAllInfraAssetData(tenant), GetAllBusinessApplication(tenant);
    }
  }, [tenant]);

  return (
    <form
      onSubmit={handleSubmit}
      className="bg-gradient-custom min-h-screen pt-20 text-white p-6 rounded-lg max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
    >
      {/* Row 1 */}
      <div>
        <label className="block mb-1 text-sm">Scan Type</label>
        <select
          name="scan_type"
          value={values.scan_type}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
        >
          <option value="">-- Select Scan Type --</option>
          <option value="Automatic">Automatic</option>
          <option value="Manual">Manual</option>
        </select>
      </div>

      <div>
        <label className="block mb-1 text-sm">Asset Type</label>
        <select
          name="asset_type"
          value={values.asset_type}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
        >
          <option value="">-- Select Asset Type --</option>
          <option value="Infrastructure">Infrastructure</option>
          <option value="Application">Application</option>
        </select>
      </div>

      <div>
        <label className="block mb-1 text-sm">Threat Type</label>
        <select
          name="threat_type"
          value={values.threat_type}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
        >
          <option value="">-- Select Threat Type --</option>
          <option value="Vulnerability">Vulnerability</option>
          <option value="Misconfiguration">Misconfiguration</option>
        </select>
      </div>

      {/* Row 2 */}
      <div>
        <label className="block mb-1 text-sm">CVE Available</label>
        <select
          name="CVE"
          value={values.CVE}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
        >
          <option value="">-- Select --</option>
          <option value="Yes">Yes</option>
          <option value="No">No</option>
        </select>
      </div>

      {values.CVE === "Yes" && (
        <>
          <div>
            <label className="block mb-1 text-sm">CVE ID</label>
            <input
              type="text"
              name="CVE_ID"
              value={values.CVE_ID}
              onChange={handleChange}
              onBlur={handleBlur}
              className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
              placeholder="Enter CVE ID"
            />
          </div>
        </>
      )}

      {values.CVE === "No" && (
        <div>
          <label className="block mb-1 text-sm">Exploit Complexity</label>
          <select
            name="exploit_complexity"
            value={values.exploit_complexity}
            onChange={handleChange}
            onBlur={handleBlur}
            className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          >
            <option value="">-- Select Complexity --</option>
            <option value="Without Authentication">
              Without Authentication
            </option>
            <option value="Low Privilege Required">
              Low Privilege Required
            </option>
            <option value="Full Privilege Required">
              Full Privilege Required
            </option>
          </select>
        </div>
      )}

      {/* Next rows */}
      {values.asset_type === "Application" ? (
        <div>
          <label className="block mb-1 text-sm">Asset</label>
          <select
            name="BusinessApplication"
            value={values.BusinessApplication}
            onChange={handleChange}
            onBlur={handleBlur}
            className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          >
            <option value="">-- Select --</option>
            {totalBusinessApplication.map((item) => (
              <option key={item._id} value={item._id}>
                {item.name}
              </option>
            ))}
          </select>
        </div>
      ) : (
        <div>
          <label className="block mb-1 text-sm">Asset</label>
          <select
            name="InfraStructureAsset"
            value={values.InfraStructureAsset}
            onChange={handleChange}
            onBlur={handleBlur}
            className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          >
            <option value="">-- Select --</option>
            {totalInfraAsset?.map((item) => (
              <option key={item._id} value={item._id}>
                {item.asset_hostname}
              </option>
            ))}
          </select>
        </div>
      )}

      <div>
        <label className="block mb-1 text-sm">Location / Impact URL</label>
        <input
          type="text"
          name="Location"
          value={values.Location}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          placeholder="Impact URL"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm">Title</label>
        <input
          type="text"
          name="Title"
          value={values.Title}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          placeholder="Title"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm">Description</label>
        <textarea
          name="Description"
          value={values.Description}
          onChange={handleChange}
          onBlur={handleBlur}
          rows="2"
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          placeholder="Description"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm">Severity</label>
        <select
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          name="Severity"
          value={values.Severity}
          onChange={handleChange}
          onBlur={handleBlur}
        >
          <option selected disabled value="">
            {" "}
            Select Severity
          </option>
          <option value="Critical">Critical</option>
          <option value="High">High</option>
          <option value="Medium">Medium</option>
          <option value="Low">Low</option>
          <option value="Informational">Informational</option>
        </select>
      </div>

      <div>
        <label className="block mb-1 text-sm">CVSS</label>
        <input
          type="text"
          name="CVSS"
          value={values.CVSS}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          placeholder="CVSS"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm">Reference URL</label>
        <input
          type="text"
          name="Reference_URL"
          value={values.Reference_URL}
          onChange={handleChange}
          onBlur={handleBlur}
          className="w-full p-2 rounded border border-gray-600 bg-[#252A3A] text-white focus:outline-none"
          placeholder="Reference URL"
        />
      </div>

      <div className="md:col-span-2 lg:col-span-3 flex justify-end">
        <button
          type="button"
          className="bg-button px-4 py-2 rounded-lg"
          disabled={POC.length >= 9}
          onClick={() =>
            setPOC((prv) => [...prv, { value: "", file: null, image: "" }])
          }
        >
          Add Proof Of Concept
        </button>
      </div>

      {/* Proof of Concept */}
      {POC.map((item, index) => (
        <React.Fragment key={index}>
          {" "}
          <div className="bg-gradient-to-br from-slate-900 to-slate-800 p-6 rounded-xl shadow-lg max-w-2xl mx-auto">
            <div className="flex justify-end mb-2">
              {POC.length > 1 && (
                <button
                  type="button"
                  className="p-3 hover:bg-gray-700 text-xl rounded-lg"
                  onClick={() => {
                    const filter = POC.filter((_, ind) => ind !== index);
                    setPOC(filter);
                  }}
                >
                  <IoClose />
                </button>
              )}
            </div>
            <label className="block text-sm font-semibold text-white mb-2">
              Proof of Concept (POC)
            </label>

            <textarea
              rows="5"
              value={item.value}
              onChange={(e) =>
                setPOC((prv) =>
                  prv.map((ite, ind) =>
                    ind === index ? { ...ite, value: e.target.value } : ite
                  )
                )
              }
              placeholder="Enter POC Details..."
              className="w-full p-4 text-sm text-white bg-slate-700 border border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none placeholder:text-slate-400"
            ></textarea>

            <div className="mt-4">
              <label className="block text-sm font-medium text-white mb-1">
                Upload POC Document
              </label>

              <div className="relative w-full">
                <input
                  type="file"
                  className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4
              file:rounded-s-lg file:rounded-e-full file:border-0
              file:text-sm file:font-semibold
              file:bg-blue-600 file:text-white
              hover:file:bg-blue-700
              bg-slate-700 border border-slate-600 rounded-lg
              cursor-pointer"
                  onChange={(e) => {
                    const file = e.target.files[0];
                    const image = URL.createObjectURL(file);
                    console.log(image);
                    if (file) {
                      setPOC((prv) =>
                        prv.map((ite, ind) =>
                          ind === index ? { ...ite, file: file, image } : ite
                        )
                      );
                    }
                  }}
                />
              </div>

              {item.image && (
                <div className="py-2 px-3">
                  <img src={item.image} className="size-14" />
                </div>
              )}
            </div>
          </div>{" "}
        </React.Fragment>
      ))}

      {/* Submit Button Full Width */}
      <div className="md:col-span-2 lg:col-span-3 flex mb-4">
        <button
          type="submit"
          className=" bg-blue-700 hover:bg-blue-900 rounded text-white font-semibold text-center text-lg px-4 py-2 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 w-96"
        >
          Submit
        </button>
      </div>
    </form>
  );
};

export default VulnerabilityForm;
