import React, { useEffect, useState } from "react";
import {
  FiTrendingUp,
  FiTrendingDown,
  FiAlertCircle,
  FiAlertTriangle,
} from "react-icons/fi";
import { AiOutlineArrowDown, AiOutlineArrowUp, AiOutlineMenu, AiOutlineMinus, AiOutlineWarning } from "react-icons/ai";
import { useApplicationVulnerabilityContext, useAuthContext } from "@/context";
import Card from "@/components/Card";
import Loader from "@/components/Loader/Loader";
import NoDataFound from "@/components/NoDataFound";
import { IoShieldCheckmarkOutline, IoShieldOutline } from "react-icons/io5";
import { MdDangerous } from "react-icons/md";
import { ArrowDown, ArrowUp, Flame, MinusCircle } from "lucide-react";

function ApplicationVulnerability() {
  const {
    loading,
    criticalHighVulnerableItemsData,
    criticalHighVulnerableOverdueItemsData,
    lowMediumVulnerableItems,
    lowMediumVulnerableItemsOverdue,
    applicationvulnerabilityCardData,
    CriticalHighVulnerableItems,
    datafetchCount,
    setdatafetchCount,
    CriticalHighVulnerableOverdueItems,
    LowMediumVulnerableItems,
    LowMediumVulnerableItemsOverdue,
    ApplicationvulnerabilityCardData,
  } = useApplicationVulnerabilityContext();

  const { token, authenticate } = useAuthContext();

  // if (criticalHighVulnerableItemsData.length < 1
  //   ||criticalHighVulnerableOverdueItemsData.length < 1
  //   ||lowMediumVulnerableItems.length < 1
  //   ||lowMediumVulnerableItemsOverdue.length < 1) {
  //   return (<div>
  //    <NoDataFound />
  //   </div>)
  // }

  console.log(applicationvulnerabilityCardData)

  const VulnerabilityTable = ({ title, items, severity }) => {

    

    const months = items?.map((item) =>
      item.scans?.map((ite, i) => {
        const keys = Object.keys(ite?.counts);
        return keys;
      })
    )[0][0];

    const average = (data) => {
      let avg = 0;
      Object.values(data).map((item) => {
        avg += item;
      });
      avg = avg / 3;
      return avg.toFixed(2);
    };

    return (
      <div className="bg-[#2d333b] rounded-xl shadow-sm border border-gray-200 mb-6 overflow-hidden">
        <div className="p-2 border-b border-gray-200 bg-gradient-to-bl from-[#333333] to-[#666666] flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {severity === "critical" ? (
              <FiAlertCircle className="text-red-600 text-3xl" size={20} />
            ) : (
              <FiAlertTriangle className="text-orange-600 text-3xl" size={20} />
            )}
            <h2 className="text-md font-semibold text-gray-100">{title}</h2>
            <span className="px-2.5 py-0.5 rounded-full text-sm font-medium bg-[#2d333b] text-white">
              {items?.length}
            </span>
          </div>
        </div>
        <div className="overflow-x-auto">
          <table className="w-full text-white">
            <thead>
              <tr className="text-left text-sm text-white bg-[#414953] border-b border-gray-200">       
                <th className="px-4 py-2 font-semibold">Name</th>
                <th className="px-4 py-2 font-semibold">Application Type</th>
                {months?.map((item, idx) => (
                  <th key={idx} className="px-4 py-2 font-semibold">
                    {item}
                  </th>
                ))}
                <th className="px-4 py-2 font-semibold">Average Change</th>
                <th className="px-4 py-2 font-semibold">Trend</th>
              </tr>
            </thead>
            <tbody className="text-white">
              {items?.map((item) => (
                < >
                  {item?.scans?.map((ite, idx) => (
                    <tr
                      key={ite}
                      className="border-b last:border-b-0 hover:bg-[#53565c]  transition-colors"
                    >
                      <td className="px-4 py-1">
                        <a
                          href="#"
                          className="text-white text-base  hover:text-[#319151] font-medium"
                        >
                          {item.name}
                        </a>
                      </td>
                      <td className="px-4 py-1 text-sm font-semibold text-white ">
                        {ite.scanType}
                      </td>
                      {months.map((it) => (
                        // eslint-disable-next-line react/jsx-key
                        <td className="px-4 py-1">{ite.counts[it] || 0}</td>
                      ))}
                      <td className="px-4 py-1">{average(ite.counts)}</td>
                      <td className="px-4 py-1">
                        <div className="w-20 h-8 bg-gray-300 rounded-lg relative">
                          {average(ite.counts) >= 1 && (
                            <FiTrendingUp
                              className="text-red-800 absolute inset-0 m-auto"
                              size={16}
                            />
                          )}
                          {average(ite.counts) < 1 && (
                            <FiTrendingDown
                              className="text-green-600 absolute inset-0 m-auto"
                              size={16}
                            />
                          )}
                          {average(ite.counts) === 0 && (
                            <div className="h-0" />
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </>
              ))}
            </tbody>
          </table>
        </div>
        {/* <div className="flex items-center justify-between p-4 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center space-x-2">
            <button className="px-2 py-1 bor.5 w-12 bg-gray-400 absolute inset-0 m-autoder rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &lt;&lt;
            </button>
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &lt;
            </button>
            <span className="text-sm text-gray-600">
              1 to 5 of {items?.length}
            </span>
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &gt;
            </button>
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &gt;&gt;
            </button>
          </div>
        </div> */}
      </div>
    );
  };


  const metrics = [
    {
      title: "High",
      value: applicationvulnerabilityCardData?.high,
      color: "from-[#CC406B] to-[#8A0703]", // Figma Red gradient
      icon: ArrowUp ,
      chartColor: "#FFF",
    },
    {
      title: "Low",
      value: applicationvulnerabilityCardData?.low,
      color: "from-[#5579C2] to-[#113A8C]", // Figma Blue gradient
      icon: ArrowDown ,
      chartColor: "#FFF",
    },
    {
      title: "Medium",
      value: applicationvulnerabilityCardData?.medium,
      color: "from-[#A63D83] to-[#8A0B5F]", // Figma Cyan gradient
      icon: MinusCircle ,
      chartColor: "#FFF",
    }, 
     {
      title: "Critical",
      value: applicationvulnerabilityCardData?.critical,
      icon: Flame ,
      color: "from-[#2DA8A2] to-[#077A75]", // Dark Gray gradient
      chartColor: "#FFF",
    },
  ];

  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <div className="min-h-screen bg-background">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3  mx-8 py-2">
         
          {metrics.map((metric, index) => (
            <Card key={index} data={metric} />
          ))}
        </div>

          {(criticalHighVulnerableItemsData.length < 1
    ||criticalHighVulnerableOverdueItemsData.length < 1
    ||lowMediumVulnerableItems.length < 1
    ||lowMediumVulnerableItemsOverdue.length < 1)
     ?
    <NoDataFound />
    :
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <VulnerabilityTable
              title="Critical / High Vulnerable Items"
              items={criticalHighVulnerableItemsData || []}
              severity="critical"
            />
            <VulnerabilityTable
              title=" Critical / High OverDue Critical Vulnerable Items"
              items={criticalHighVulnerableOverdueItemsData || []}
              severity="critical"
            />
            <VulnerabilityTable
              title="Medium / Low  Vulnerable Items"
              items={lowMediumVulnerableItems || []}
              severity="high"
            />
            <VulnerabilityTable
              title="Medium / Low OverDue Vulnerable Items"
              items={lowMediumVulnerableItemsOverdue || []}            
              severity="high"
            />
          </div>}
        </div>
      )}
    </>
  );
}

export default ApplicationVulnerability;