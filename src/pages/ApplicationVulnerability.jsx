import React, { useEffect, useState } from "react";
import {
  FiTrendingUp,
  FiTrendingDown,
  FiAlertCircle,
  FiAlertTriangle,
} from "react-icons/fi";
import { AiOutlineMenu, AiOutlineWarning } from "react-icons/ai";
import { useApplicationVulnerabilityContext, useAuthContext } from "@/context";
import Card from "@/components/Card";
import Loader from "@/components/Loader/Loader";

function ApplicationVulnerability() {
  const {
    loading,
    criticalHighVulnerableItemsData,
    criticalHighVulnerableOverdueItemsData,
    lowMediumVulnerableItems,
    lowMediumVulnerableItemsOverdue,
    applicationvulnerabilityCardData,
    CriticalHighVulnerableItems,
    datafetchCount,
    setdatafetchCount,
    CriticalHighVulnerableOverdueItems,
    LowMediumVulnerableItems,
    LowMediumVulnerableItemsOverdue,
    ApplicationvulnerabilityCardData,
  } = useApplicationVulnerabilityContext();

  const { token, authenticate } = useAuthContext();

  console.log(authenticate.role)

  const VulnerabilityTable = ({ title, items, severity }) => {

    if (items.length < 1) {
      return (<div>
        <h2>Data is Not enough to Show .</h2>
      </div>)
    }



    const months = items?.map((item) =>
      item.scans?.map((ite, i) => {
        const keys = Object.keys(ite?.counts);
        return keys;
      })
    )[0][0];

    const average = (data) => {
      let avg = 0;
      Object.values(data).map((item) => {
        avg += item;
      });
      avg = avg / 3;
      return avg.toFixed(2);
    };

    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 mb-6 overflow-hidden">
        <div className="p-4 border-b border-gray-200 bg-[#015289] flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {severity === "critical" ? (
              <FiAlertCircle className="text-red-600 text-3xl" size={20} />
            ) : (
              <FiAlertTriangle className="text-orange-600 text-3xl" size={20} />
            )}
            <h2 className="text-lg font-semibold text-gray-100">{title}</h2>
            <span className="px-2.5 py-0.5 rounded-full text-sm font-medium bg-gray-200 text-gray-800">
              {items?.length}
            </span>
          </div>
        </div>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="text-left text-sm text-gray-600 bg-gray-50 border-b border-gray-200">
                <th className="px-4 py-3 font-semibold">Name</th>
                <th className="px-4 py-3 font-semibold">Application Type</th>
                {months?.map((item, idx) => (
                  <th key={idx} className="px-4 py-3 font-semibold">
                    {item}
                  </th>
                ))}
                <th className="px-4 py-3 font-semibold">Average Change</th>

                <th className="px-4 py-3 font-semibold">Trend</th>
              </tr>
            </thead>
            <tbody>
              {items?.map((item) => (
                < >
                  {item?.scans?.map((ite, idx) => (
                    <tr
                      key={ite}
                      className="border-b last:border-b-0 hover:bg-gray-50 transition-colors"
                    >
                      <td className="px-4 py-3">
                        <a
                          href="#"
                          className="text-gray-800 text-base  hover:text-blue-800 font-medium"
                        >
                          {item.name}
                        </a>
                      </td>
                      <td className="px-4 py-3 text-sm font-semibold text-blue-700 ">
                        {ite.scanType}
                      </td>
                      {months.map((it) => (
                        <td className="px-4 py-3">{ite.counts[it] || 0}</td>
                      ))}
                      <td className="px-4 py-3">{average(ite.counts)}</td>
                      <td className="px-4 py-3">
                        <div className="w-20 h-8 bg-gray-100 rounded-lg relative">
                          {average(ite.counts) >= 1 && (
                            <FiTrendingUp
                              className="text-red-500 absolute inset-0 m-auto"
                              size={16}
                            />
                          )}
                          {average(ite.counts) < 1 && (
                            <FiTrendingDown
                              className="text-green-500 absolute inset-0 m-auto"
                              size={16}
                            />
                          )}
                          {average(ite.counts) === 0 && (
                            <div className="h-0.5 w-12 bg-gray-400 absolute inset-0 m-auto" />
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </>
              ))}
            </tbody>
          </table>
        </div>
        <div className="flex items-center justify-between p-4 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center space-x-2">
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &lt;&lt;
            </button>
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &lt;
            </button>
            <span className="text-sm text-gray-600">
              1 to 5 of {items?.length}
            </span>
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &gt;
            </button>
            <button className="px-2 py-1 border rounded-lg hover:bg-white transition-colors disabled:opacity-50">
              &gt;&gt;
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <div className="min-h-screen bg-gray-100">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mx-8 py-4">
            {Object.keys(applicationvulnerabilityCardData)?.map((item, idx) => {
              return (
                <div key={idx} className="bg-white rounded-lg shadow p-6 hover:scale-105  transition">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-base  text-black capitalize">
                      {item} Vulnerability{" "}
                    </h3>
                    <FiAlertCircle className="text-red-500" size={20} />
                  </div>
                  <div className="space-y-1">
                    <p className="text-3xl ">
                      {applicationvulnerabilityCardData[item]}
                    </p>
                  </div>
                </div>
              );
            })}
          </div>

          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <VulnerabilityTable
              title="Critical / High Vulnerable Items"
              items={criticalHighVulnerableItemsData || []}
              severity="critical"
            />

            <VulnerabilityTable
              title=" Critical / High OverDue Critical Vulnerable Items"
              items={criticalHighVulnerableOverdueItemsData || []}
              severity="critical"
            />
            <VulnerabilityTable
              title="Medium / Low  Vulnerable Items"
              items={lowMediumVulnerableItems || []}
              severity="high"
            />
            <VulnerabilityTable
              title="Medium / Low OverDue Vulnerable Items"
              items={lowMediumVulnerableItemsOverdue || []}
              severity="high"
            />
          </div>
        </div>
      )}
    </>
  );
}

export default ApplicationVulnerability;
