import { createContext, useEffect, useState } from "react";
import { useAuthContext } from "..";
import { AxiosHandler } from "@/config/AxiosConfig";



export const ApplicationVulnerabilityContext = createContext();

// eslint-disable-next-line react/prop-types
const ApplicationVulnerabilityContextProvider = ({ children }) => {


	const { token, authenticate } = useAuthContext()



	const [loading, setLoading] = useState(false);

	const [criticalHighVulnerableItemsData, setCriticalHighVulnerableItemsData] = useState([])

	const [criticalHighVulnerableOverdueItemsData, setCriticalHighVulnerableOverdueItemsData] = useState([])

	const [lowMediumVulnerableItems, setLowMediumVulnerableItemsData] = useState([])

	const [lowMediumVulnerableItemsOverdue, setLowMediumVulnerableItemsOverdueData] = useState([])

	const [applicationvulnerabilityCardData, setApplicationvulnerabilityCardData] = useState([])




	const CriticalHighVulnerableItems = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/data/CriticalHighVulnerableItems");
			setCriticalHighVulnerableItemsData(res.data?.results);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}
	const OrgCriticalHighVulnerableItems = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/org/CriticalHighVulnerableItems");
			setCriticalHighVulnerableItemsData(res.data?.results);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}


	const CriticalHighVulnerableOverdueItems = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/data/CriticalHighVulnerableItemsOverdue");
			setCriticalHighVulnerableOverdueItemsData(res.data?.results);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}
	const OrgCriticalHighVulnerableOverdueItems = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/org/CriticalHighVulnerableItemsOverdue");
			setCriticalHighVulnerableOverdueItemsData(res.data?.results);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}


	const LowMediumVulnerableItems = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/data/LowMediumVulnerableItems");
			setLowMediumVulnerableItemsData(res.data?.results);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}
	const OrgLowMediumVulnerableItems = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/org/LowMediumVulnerableItems");
			setLowMediumVulnerableItemsData(res.data?.results);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}


	const LowMediumVulnerableItemsOverdue = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/data/LowMediumVulnerableItemsOverdue");
			//console.log("adminLowMediumVulnerableItemsOverdue", res)
			setLowMediumVulnerableItemsOverdueData(res.data?.results);

		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}
	const OrgLowMediumVulnerableItemsOverdue = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/org/LowMediumVulnerableItemsOverdue");
			//console.log("OrgLowMediumVulnerableItemsOverdue", res)
			setLowMediumVulnerableItemsOverdueData(res.data?.results);

		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}


	const ApplicationvulnerabilityCardData = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/data/ApplicationvulnerabilityCardData");
			//console.log("admin", res.data)
			setApplicationvulnerabilityCardData(res.data);
		} catch (error) {
			console.log(error)
		} finally {
			setLoading(false);
		}
	}


	useEffect(() => {
		if (token) {

			authenticate?.role === "Admin" ?
				ApplicationvulnerabilityCardData() :

			authenticate?.role === "Admin" ?
				LowMediumVulnerableItemsOverdue() : OrgLowMediumVulnerableItemsOverdue();

			authenticate?.role === "Admin" ?
				LowMediumVulnerableItems() :
				OrgLowMediumVulnerableItems();

			authenticate?.role === "Admin" ?
				CriticalHighVulnerableOverdueItems() :
				OrgCriticalHighVulnerableOverdueItems();

			authenticate?.role === "Admin" ?
				CriticalHighVulnerableItems() :
				OrgCriticalHighVulnerableItems();
		}
	}, [token, authenticate?.role])

	return (
		<ApplicationVulnerabilityContext.Provider value={{
			loading,
			criticalHighVulnerableItemsData,
			criticalHighVulnerableOverdueItemsData,
			lowMediumVulnerableItems,
			lowMediumVulnerableItemsOverdue,
			applicationvulnerabilityCardData

		}}>
			{children}
		</ApplicationVulnerabilityContext.Provider>
	)
}


export default ApplicationVulnerabilityContextProvider