import { AxiosHandler } from "@/config/AxiosConfig";
import { useAllEmployeeContext, useAuthContext } from "..";
import { createContext, useState, useEffect } from "react";
import toast from "react-hot-toast";


export const VulnerabililtyDataContext = createContext();




const VulnerabililtyDataContextProvider = ({ children }) => {

	const [loading, setLoading] = useState(false);
	const [allVulnerabilityData, setAllVulnerabilityData] = useState([]);
	const [topVulnerabliltyData, setTopVulnerabliltyData] = useState([]);
	const [notificationData, setNotificationData] = useState([]);


	const [page, setPage] = useState(1)

	const { token } = useAuthContext()
	const { EmployeeTasks } = useAllEmployeeContext()

	const Notifications = async () => {

		try {
			const res = await AxiosHandler.get(`/notification/get`);
			console.log(res)
			setNotificationData(res.data.data);
		} catch (error) {
			console.log(error)
		}
	}

	const CreateNotifications = async (reciver_id, title) => {
		const toastId = toast.loading("Loading...");
		try {

			const res = await AxiosHandler.post(`/notification/create`, {
				reciver_id,
				title
			});
			console.log(res)
			toast.dismiss(toastId);
			toast.success(res.data.message);

		} catch (error) {
			console.log(error)
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}

	const NotificationsViewed = async (id) => {
		console.log(id)

		try {
			const res = await AxiosHandler.patch(`/notification/viewed/${id}`);
			console.log(res)
			toast.success(res.data.message);
			setNotificationData(res.data.data);
		} catch (error) {
			toast.error(error?.response?.data?.message);
			console.log(error)
		}
	}


	const AllVulnerablilty = async () => {

		try {
			const res = await AxiosHandler.get(`/data/get?page=${page}&limit=10`);
			setAllVulnerabilityData(res.data.data);


		} catch (error) {

		}
	}

	const TopVulnerablilty = async () => {

		try {
			const res = await AxiosHandler.get(`/data/top-vulnerabilities`);
			setTopVulnerabliltyData(res.data.data);
			console.log(res)


		} catch (error) {

		}
	}

	const UpdateData = async (data, id) => {
		console.log(data, id, "heroooooooooooo")
		const toastId = toast.loading("Loading...");
		try {
			const res = await AxiosHandler.patch(`/data/update/${id}`, data);
			AllVulnerablilty();
			EmployeeTasks();
			toast.dismiss(toastId);
			toast.success(res.data.message);


		} catch (error) {
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}

	const AddData = async (data) => {
		const toastId = toast.loading("Loading...");
		try {
			const res = await AxiosHandler.post(`/data/add-new`, data);
			AllVulnerablilty();

			toast.dismiss(toastId);
			toast.success(res.data.message);


		} catch (error) {

			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}

	const DeleteData = async (id) => {
		const toastId = toast.loading("Loading...");
		try {

			const res =
				await AxiosHandler.delete(`/data/delete/${id}`);
			AllVulnerablilty();
			toast.dismiss(toastId);
			toast.success(res.data.message);

		} catch (error) {

			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}

	const AssignTask = async (empId, id) => {
		const toastId = toast.loading("Loading...");
		try {

			const res = await AxiosHandler.patch(`/data/assign/${id}`, { "Assigned_To": empId });
			AllVulnerablilty();

			toast.dismiss(toastId);
			toast.success(res.data.message);

		} catch (error) {
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}


	const BulkAssignTask = async (empId, tasks) => {
		const toastId = toast.loading("Loading...");
		try {

			const res = await AxiosHandler.patch(`/data/bulk-asigned-task`, {
				Assigned_To: empId,
				tasks
			});
			AllVulnerablilty();

			toast.dismiss(toastId);
			toast.success(res.data.message);

		} catch (error) {
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}



	useEffect(() => {
		if (token) {
			AllVulnerablilty();
			TopVulnerablilty();
			Notifications();

		}
	}, [token, page])
	return (
		<VulnerabililtyDataContext.Provider value={{
			allVulnerabilityData,
			TopVulnerablilty,
			AddData,
			UpdateData,
			DeleteData,
			AssignTask,
			page,
			setPage,
			BulkAssignTask,
			topVulnerabliltyData,
			notificationData,
			NotificationsViewed,
			CreateNotifications

		}}>
			{children}
		</VulnerabililtyDataContext.Provider>
	)
}

export default VulnerabililtyDataContextProvider