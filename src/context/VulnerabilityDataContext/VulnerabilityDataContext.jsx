/* eslint-disable react-refresh/only-export-components */
/* eslint-disable react/prop-types */
/* eslint-disable no-dupe-keys */
import { AxiosHandler } from "@/config/AxiosConfig";
import { useAuthContext, useDataContext } from "..";
import { createContext, useState, useEffect } from "react";
import toast from "react-hot-toast";

export const VulnerabililtyDataContext = createContext();

const VulnerabililtyDataContextProvider = ({ children }) => {
  const [loading, setLoading] = useState(false);

  const {GetAssignedByData} = useDataContext()


  const [datafetchCount, setdatafetchCount] = useState(0);

  const [allApplicationData, setAllApplicationData] = useState([]);
  const [allInfrastructureData, setAllInfrastructureData] = useState([]);
  const [getOrganizationData, setGetOrganizationData] = useState([]);
  const [topVulnerabliltyData, setTopVulnerabliltyData] = useState([]);
  const [chatData, setChatData] = useState([]);
  const [notificationData, setNotificationData] = useState([]);

  const [page, setPage] = useState(1);

  const { token } = useAuthContext();

  const Notifications = async () => {
    try {
      const res = await AxiosHandler.get(`/notification/get`);
     
      setNotificationData(res.data.data);
    } catch (error) {
      console.log(error);
    }
  };

  const CreateNotifications = async (reciver_id, title) => {
    console.log('notification create')
    try {
      const res = await AxiosHandler.post(`/notification/create`, {
        reciver_id,
        title,
      });
    } catch (error) {
      console.log(error);
      toast.error(error?.response?.data?.message);
    }
  };

  const orgnizationNotification = async (Organization, text) => {
    try {
      const res = await AxiosHandler.post(
        `/notification/orgnization-notification`,
        {
          Organization,
          text,
        }
      );
    } catch (error) {
      console.log(error);
      //toast.error(error?.response?.data?.message);
    }
  };

  const NotificationsViewed = async (id) => {
    //console.log(id)

    try {
      const res = await AxiosHandler.patch(`/notification/viewed/${id}`);
      //console.log(res)
      Notifications();
    } catch (error) {
      toast.error(error?.response?.data?.message);
      //console.log(error)
    }
  };

 


  const ChatDataPost = async (data) => {
    try {
      const res = await AxiosHandler.post(`/open-api/text-response`, data);
      console.log(res)
      GetChatData(data.task)
    } catch (error) {
      console.log(error)
      toast.error(error?.response?.data?.message);
    }
  };

  const GetChatData = async (id) => {
    setLoading(true)
    try {
      const res = await AxiosHandler.get(`/open-api/get/${id}`);
      setChatData(res.data.data)
     console.log(res.data.data)
    } catch (error) {
      console.log(error);
    }finally{
      setLoading(false)
    }
  };


  const GetOrganization = async () => {
    try {
      const res = await AxiosHandler.get(`/data/GetOrganization`);
      setGetOrganizationData(res.data.data);
    } catch (error) {
      console.log(error);
    }
  };

  const GetApplicationData = async (page,tenant) => {
    setLoading(true);
    try {
      const res = await AxiosHandler.get(`/data/get-application?page=${page}&tenant=${tenant ? tenant : ""}`);
      setAllApplicationData(res.data.data);
    } catch (error) {
      console.log(error?.message);
    } finally {
      setLoading(false);
    }
  };


    const GetInfrastructureData = async (page,tenant) => {
    setLoading(true);
    try {
      const res = await AxiosHandler.get(`/data/get-infrastructure?page=${page}&tenant=${tenant ? tenant : ""}`);
      setAllInfrastructureData(res.data.data);
    } catch (error) {
      console.log(error?.message);
    } finally {
      setLoading(false);
    }
  };

  

  const TopVulnerablilty = async () => {
    setLoading(true);

    try {
      const res = await AxiosHandler.get(`/data/top-vulnerabilities`);
      setTopVulnerabliltyData(res.data.data);
    } catch (error) {
      console.log(error?.message);
    } finally {
      setLoading(false);
    }
  };

  const UpdateData = async (data, id) => {
    const toastId = toast.loading("Loading...");
    try {
      const res = await AxiosHandler.patch(`/data/update/${id}`, data);
      GetApplicationData();
      GetInfrastructureData()
      GetAssignedByData()
      toast.dismiss(toastId);
      toast.success(res.data.message);
    } catch (error) {
      console.log(error);
      toast.dismiss(toastId);
      toast.error(error?.response?.data?.message);
    }
  };

  const AddData = async (data,tenant) => {
    const toastId = toast.loading("Loading...");
    try {
      const res = await AxiosHandler.post(`/data/add-new?tenant=${tenant}`, data);
      toast.dismiss(toastId);
      toast.success(res.data.message);
    } catch (error) {
      console.log("this is new Venurable error",error)
      toast.dismiss(toastId);
      toast.error(error?.response?.data?.message);
    }
  };

  const DeleteData = async (id) => {
    const toastId = toast.loading("Loading...");
    try {
      const res = await AxiosHandler.delete(`/data/delete/${id}`);
      GetApplicationData();
      GetInfrastructureData();
      toast.dismiss(toastId);
      toast.success(res.data.message);
    } catch (error) {
      toast.dismiss(toastId);
      toast.error(error?.response?.data?.message);
    }
  };

  const AssignTask = async (empId, id) => {
    const toastId = toast.loading("Loading...");
    try {
      const res = await AxiosHandler.patch(`/data/assign/${id}`, {
        Assigned_To: empId,
      });

      GetApplicationData();

      toast.dismiss(toastId);
      toast.success(res.data.message);
    } catch (error) {
      toast.dismiss(toastId);
      toast.error(error?.response?.data?.message);
    }
  };

  const BulkAssignTask = async (empId, tasks) => {
    const toastId = toast.loading("Loading...");
    try {
      const res = await AxiosHandler.patch(`/data/bulk-asigned-task`, {
        Assigned_To: empId,
        tasks,
      });
      GetApplicationData();

      toast.dismiss(toastId);
      toast.success(res.data.message);
    } catch (error) {
      toast.dismiss(toastId);
      toast.error(error?.response?.data?.message);
    }
  };

  const BulkDataDelete = async (ids) => {
    try {
      const res = await AxiosHandler.post("/data/delete-many",{ids})
      toast.success(res.data.message);
      GetApplicationData()
    } catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    if (token) {
      Notifications();
    
    }
  }, [token]);
  return (
    <VulnerabililtyDataContext.Provider
      value={{
        loading,
        allApplicationData,
        GetApplicationData,
        TopVulnerablilty,
        AddData,
        UpdateData,
        DeleteData,
        AssignTask,
        page,
        setPage,
        BulkAssignTask,
        topVulnerabliltyData,
        notificationData,
        orgnizationNotification,
        NotificationsViewed,
        CreateNotifications,
        getOrganizationData,
        datafetchCount,
        setdatafetchCount,
        TopVulnerablilty,
        GetOrganization,
        Notifications,
        ChatDataPost,
        GetChatData,
        chatData,
        BulkDataDelete,
        GetInfrastructureData,
        allInfrastructureData
      }}
    >
      {children}
    </VulnerabililtyDataContext.Provider>
  );
};

export default VulnerabililtyDataContextProvider;
