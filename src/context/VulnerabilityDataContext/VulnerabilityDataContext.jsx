import { AxiosHandler } from "@/config/AxiosConfig";
import { useAuthContext } from "..";
import { createContext, useState, useEffect } from "react";
import toast from "react-hot-toast";


export const VulnerabililtyDataContext = createContext();




const VulnerabililtyDataContextProvider = ({ children }) => {

	const [loading, setLoading] = useState(false);
	const [allVulnerabilityData, setAllVulnerabilityData] = useState([]);

	const { token } = useAuthContext()

	const AllVulnerablilty = async (page = 1) => {

		try {
			const res = await AxiosHandler.get(`/data/get?page=${page}&limit=10`);
			setAllVulnerabilityData(res.data.data);

		} catch (error) {

		}
	}

	const UpdateData = async (data, id) => {
		const toastId = toast.loading("Loading...");
		try {
			const res = await AxiosHandler.patch(`/data/update/${id}`, data);
			AllVulnerablilty();
			toast.dismiss(toastId);
			toast.success(res.data.message);


		} catch (error) {
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}


	const AddData = async (data) => {
		const toastId = toast.loading("Loading...");
		try {
			const res = await AxiosHandler.post(`/data/add-new`, data);
			AllVulnerablilty();

			toast.dismiss(toastId);
			toast.success(res.data.message);


		} catch (error) {

			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}



	const DeleteData = async (id) => {
		const toastId = toast.loading("Loading...");
		try {

			const res =
				await AxiosHandler.delete(`/data/delete/${id}`);
			AllVulnerablilty();
			toast.dismiss(toastId);
			toast.success(res.data.message);

		} catch (error) {

			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}


	const AssignTask = async (data, id) => {
		const toastId = toast.loading("Loading...");
		try {

			const res = await AxiosHandler.patch(`/data/assign/${id}`, { "Assigned_To": data });
			AllVulnerablilty();

			toast.dismiss(toastId);
			toast.success(res.data.message);

		} catch (error) {
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message);

		}
	}



	useEffect(() => {
		if (token) {
			AllVulnerablilty();
		}
	}, [token])
	return (
		<VulnerabililtyDataContext.Provider value={{
			allVulnerabilityData,
			AddData,
			UpdateData,
			DeleteData,
			AssignTask
		}}>
			{children}
		</VulnerabililtyDataContext.Provider>
	)
}

export default VulnerabililtyDataContextProvider