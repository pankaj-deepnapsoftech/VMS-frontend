import { createContext, useEffect, useState } from "react";
import { useAuthContext } from "..";
import { AxiosHandler } from "@/config/AxiosConfig";
import toast from "react-hot-toast";
import { useNavigate } from "react-router-dom";





export const InfrastructureVulnerabilityContext = createContext();

const InfrastructureVulnerabilityContextProvider = ({ children }) => {
	let navigate = useNavigate();



	const [loading, setLoading] = useState(false);

	const [page, setPage] = useState(1)

	const { token } = useAuthContext()

	const [infrafirstChartData, setInfrafirstChartData] = useState([])
	const [infraSecondChartData, setInfraSecondChartData] = useState([])
	const [infraThirdChartData, setInfraThirdChartData] = useState([])


	const InfrafirstChart = async () => {
		setLoading(true);
		try {

			const res = await AxiosHandler.get("/infra/Vulnerable-ci-1");
			setInfrafirstChartData(res.data?.data);
		} catch (error) {
			console.log(error)

		} finally {
			setLoading(false);
		}
	}

	const InfraSecondChart = async () => {
		setLoading(true);
		try {
			const res = await AxiosHandler.get("/infra/Vulnerable-ci-2");
			console.log(res, "OPOPOPOPOPPOOOPOPOP")
			setInfraSecondChartData(res.data?.data);
		} catch (error) {
			console.log(error)

		} finally {
			setLoading(false);
		}
	}
	const InfraThirdChart = async () => {
		setLoading(true);
		try {
			const res = await AxiosHandler.get("/infra/Vulnerable-ci-3");
			console.log(res, "######################")
			setInfraThirdChartData(res.data?.data);
		} catch (error) {
			console.log(error)

		} finally {
			setLoading(false);
		}
	}




	const reportUpload = async (data) => {
		const toastId = toast.loading("Loading...");
		try {
			const formData = new FormData();
			formData.append("excel", data)
			const res = await AxiosHandler.post("/infra/create-infra", formData); toast.dismiss(toastId);
			toast.success(res.data.message);
		} catch (error) {
			//console.log(error)
			toast.dismiss(toastId);
			toast.error(error?.response?.data?.message || "something went wrong please try again...");
		}
	};


	useEffect(() => {
		if (token) {
			InfrafirstChart()
			InfraSecondChart()
			InfraThirdChart()

		}
	}, [token, page])

	return (
		<InfrastructureVulnerabilityContext.Provider value={{
			loading,
			infrafirstChartData,
			infraSecondChartData,
			infraThirdChartData,
			reportUpload

		}}>
			{children}
		</InfrastructureVulnerabilityContext.Provider>
	)
}


export default InfrastructureVulnerabilityContextProvider